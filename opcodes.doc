
Format: [hex name] (if hex>=0x100 then first operand can be A-H or S-Z)

Jump destination: if less than 256, then returns that value from this
subroutine instead of jumping to that address. The same is true for calls.

Where coordinates are expected, they can be nonzero for packed coordinates
or zero to use the X and Y registers instead. (Packed coordinates are:
(Y*board_width+X+1).)

In the below, usually 32-bit numbers are treated as signed, and 16-bit
numbers are treated as unsigned.


[000 ADD]
  Add second operand to first, storing result in the first.

[001 SUB]
  Subtract second operand from first, storing result in the first.

[002 RSUB]
  Subtract first operand from second, storing result in the first.

[003 MUL]
  Multiply the two operands and store the result in the first.

[004 DIV]
  Divide first by second, storing the quotient in the first, and the
  condition flag is true. In case of division by zero, the first operand
  is unchanged, and the condition flag is false.

[005 MOD]
  Divide first by second, storing the remainder in the first, and the
  condition flag is true. In case of division by zero, the first operand
  is unchanged, and the condition flag is false.

[006 ASUB]
  Store the absolute value of the difference of operands in the first.

[007 ANDN]
  Bitwise AND NOT of both operands, storing result in the first.

[008 AND]
  Bitwise AND of both operands, storing result in the first.

[009 OR]
  Bitwise OR of both operands, storing result in the first.

[00A XOR]
  Bitwise XOR of both operands, storing result in the first.

[00B XORN]
  Bitwise XOR NOT of both operands, storing result in the first.

[00C LSH]
  Shift left first operand by number of bits specified by second operand.
  The shift amount is treated as unsigned; if it is out of range, then all
  bits are shifted out.

[00D RSH]
  Shift right first operand by number of bits specified by second operand,
  with sign extension. The shift amount is treated as unsigned; if it is
  out of range, then all bits are shifted out.

[00E URSH]
  Shift right first operand by number of bits specified by second operand,
  with zero extension. The shift amount is treated as unsigned; if it is
  out of range, then all bits are shifted out.

[00F GOTO]
  Unconditionally jump to second operand.

[010 JZ]
  Jump to second operand if first operand is zero.

[011 JNZ]
  Jump to second operand if first operand is nonzero.

[012 JF]
  Jump to second operand if condition flag is false.

[013 JT]
  Jump to second operand if condition flag is true.

[014 JNEG]
  Jump to second operand if first operand is less than zero.

[015 JPOS]
  Jump to second operand if first operand is greater than or equal to zero.

[016 JEV]
  Jump to second operand if first operand is even.

[017 JOD]
  Jump to second operand if first operand is odd.

[018 LOOP]
  If first operand is nonzero, decrement it and jump to second operand.

[019 TSTB]
  Like BTST but the operands are reversed.

[01A MAX]
  If the second operand is greater than the first, then copy the second
  operand to the first.

[01B MIN]
  If the second operand is less than the first, then copy the second
  operand to the first.

[01C EQ]
  Condition is true if operands are equal, or false if unequal.

[01D BTST]
  Condition is true if bit whose position is specified by second operand
  (only the low 5-bits are used) is set in the first operand, or is false
  if that bit is clear.

[01E LESS]
  Condition is true if first operand is less than second, else false.

[01F GRTR]
  Condition is true if first operand is greater than second, else false.

[020 PEEK]
  Second operand is the address; read the unsigned 16-bit value at that
  address and store it in the first operand.

[021 POKE]
  Second operand is the address; write the low 16-bits of the first operand
  into memory at that address.

[022 EXCH]
  Second operand is the address; the value there is exchanged with the low
  16-bits of the first operand.

[023 UPTO]
  If the first operand is less than the second, increment it and then the
  condition flag is true; otherwise, leave the first operand unchanged and
  the condition flag is false.

[024 VGET]
  Low 4-bits of second operand tells which global status variable to
  access; its value is copied into the first operand.

[025 VPUT]
  Low 4-bits of second operand tells which global status variable to
  access; the first operand is written to it.

[028 PEER]
  Adds together the operands to make the address in memory to read a 16-bit
  number from, and store that in the first operand.

[029 CASE]
  Adds together the operands to make the address in memory to read a 16-bit
  number from, and jumps to the address which is the 16-bit number which has
  been read from that address.

[02C REGS]
  Save registers. The second operand is the memory address, and the first
  operand is the last register to be saved. It uses two cells per register.

[02D REGL]
  Load registers. The second operand is the memory address, and the first
  operand is the last register to be loaded.

[02E WEEK]
  Like PEEK but read a PDP-endian 32-bit number instead of 16-bits.

[02F WOKE]
  Like POKE but write a PDP-endian 32-bit number instead of 16-bits.

[030 UNPC]
  Unpack coordinates in second operand to X and Y. (If second operand is
  zero, then X and Y are unchanged.)

[031 DIR]
  Low 2-bits of second operand is direction to adjust the packed
  coordinates stored by the register specified by the first operand. If
  the new coordinates are in range, then they are adjusted and the
  condition flag is true, otherwise it is false.

[032 FORW]
  Low 2-bits of second operand is direction to adjust X and Y coordinates.
  The condition flag is true if they were successfully adjusted, or false
  if they were unchanged because the new values would be out of range.

[033 BACK]
  Low 2-bits of second operand is the opposite of the direction to adjust
  X and Y coordinates; otherwise it is like FORW.

[034 EMAT]
  The low 8-bits of the second operand is the element number, and the first
  operand selects which of the high 8-bits of the attribute bits of that
  element to test (A for bit24, up to H for bit31); the condition flag is
  true if that bit is set or false if that bit is clear.

[035 TMAT]
  Similar to EMAT, but uses the second operand as coordinates instead, and
  uses the attributes of the element at the main layer. If coordinates are
  out of range, then the condition flag is not changed.

[036 UMAT]
  Similar to TMAT but using the under layer instead of the main layer.

[038 MOVE]
  Attempt to move the contents of a tile. The first operand is the packed
  coordinates of that tile, or zero to use X and Y coordinates. If the move
  is successful, the new coordinates are written to the first operand if it
  is nonzero, or to X and Y if it is zero. The condition flag is true if
  the move is successful or false if not. The second operand is the flags,
  which are as follows (only the low 16-bits are used):
  bit0-bit2 = Select register containing direction (A to H).
  bit3 = Do not actually move anything, but check if it can move.
  bit4 = Allow pushing (and indirect crushing).
  bit5 = Allow direct crushing.
  bit6 = Allow transporting.
  bit7 = Override move classes; can go on class 0 but not 1-7.
  bit8-bit15 = Specify if it can move on classes 8-15.

[039 SMOV]
  Similar to MOVE, but the first operand is a stat XY entry number, and it
  is not written to. (If there is no such stat, the move always fails.)

[03A GMOV]
  Similar to MOVE or SMOV, but the second operand is the address of a
  structure with the move parameters, which are:
  First = Flags (see below).
  Second = Which move classes it can move to.
  Third = X step (signed), or target X coordinate.
  Fourth = Y step (signed), or target Y coordinate.
  bit0 = Set for absolute, clear for relative.
  bit1 = Set for over layer, clear for main layer.
  bit2 = How first operand is treated: set like SMOV, clear like MOVE.
  bit3-bit6 = Same as for MOVE.
  bit7 = Set if the low octet of the move classes value should be used.
  bit8-bit10 = Register for Y step (A to H) if bit15 is set.
  bit11 = If set, X/Y steps are direction codes (low 2-bits).
  bit12-bit14 = Register for X step (A to H) if bit15 is set.
  bit15 = If set, use specified registers instead of memory fields.

[03B OMOV]
  Similar to MOVE, but applies to the overlay. It can move to any cell
  if the SOLID bit is clear in the over kind field of that cell, which
  overwrites the previous data and sets all fields in the over layer at
  the place it came from to zero. The second operand is the direction
  code (only the low 2-bits are used).

[03C PUSH]
  Similar to MOVE, but the first operand is not written to, and it can
  only move if that tile is allowed to be pushed in that direction.

[03D GPUS]
  Similar to PUSH, treating the second operand like GMOV.

[03E CWOE]
  The low 8-bits of the first operand is a element number. The low 16-bits
  of the second operand define which classes you can go on (the low bit for
  class 0, etc). If the bit corresponding to the class of that element is
  set, and that element has the A_FLOOR attribute, then the condition flag
  will be true, otherwise the condition flag will be false.

[03F CWOT]
  Like CWOE but the first operand is instead the coordinates of the tile,
  the kind at the main layer at that coordinates is used. If invalid
  coordinates are specified then the condition flag will be false.

[040 TEXT]
  Affects the text buffer, depending on the first operand:
  A = Append a packed string from the specified address.
  B = Append the board title of the board with the specified number.
  C = Append a single character (if zero, then no effect).
  D = Appends a number in decimal notation.
  E = Replace the text buffer with a global text string (0=empty).
  G = Append a global text string.
  H = Appends a number in eight character uppercase hex.

[041 MESS]
  Has the same effect as the TEXT instruction, and then replaces the
  message line text with the contents of the text buffer.

[042 HELP]
  Display a help file. The second operand is the number of the help file
  to be displayed (it is a lump named by four hex digits and then ".HLP");
  if it is negative, then the text buffer followed by ".HLP" is used. If
  a command is selected, then the condition flag is true and the first
  operand will be the command code; otherwise, the condition flag will be
  false and the first operand is not affected.

[044 WARP]
  Set the warp. The first operand is the target board number, and the
  second operand is the address of a subroutine to execute after the warp
  occurs (before anything else). W will be the previous board number, and
  X,Y,Z will be the same as the current value of X,Y,Z.

[045 EXIT]
  The low 2-bits of the second operand tells which direction of board exit
  to access. The target board number is written to the first operand, and
  the condition flag will be true if it is nonzero or false otherwise.

[047 REVB]
  Revert the board number specified by the second operand to the board
  stored in the world file with that number. This does not affect the
  current board, although if you clear the persist flag and then warp,
  then it will revert the current board, too.

[048 GBF]
  Read board flag of current board, bitwise AND NOT with the second
  operand, into first operand.

[049 PBF]
  Set board flag to value of second operand.

[04A GBU]
  Read board user data of current board, bitwise AND NOT with the second
  operand, into first operand.

[04B PBU]
  Set board user data to value of second operand.

[04C SCAN]
  Looks in the main layer for a tile whose kind is the low 8-bits of the
  second operand. It starts looking after (not on) the coordinates of the
  first operand. The condition flag is true if found, or false if it had
  to wrap around or was not found. If the first operand is zero then the
  new coordinates are written to X and Y, otherwise to the first operand.
  If the coordinate is negative, or zero and Y is negative, then it will
  start from the beginning.

[04D LITE]
  Define the shape and radius of light, which suppresses the overlay around
  the player (the first XY record of stat 1). The second operand is the
  radius, and the first operand selects the light shape:
  A = no light
  B = box
  C = circle
  D = diamond

[04E SFX]
  The second operand is a global text string number of a sound effect to be
  played; if it is negative then the text buffer is used instead. (See
  script.doc for the format of the music string.)

[04F BGM]
  (Currently unused.)

[050 SEND]
  If the first operand is the stat XY list number (same as for LOCK, PSD),
  and if it is nonzero then the second operand is the global string number
  of the label name to send to that stat (if it is not locked). If the
  second operand is zero, then use the text made by TEXT instruction as
  the label name. If the first operand is zero, then send to all stats that
  are not locked. If the label name contains a colon, then ignore the first
  operand and instead, it will send to everything whose name matches the
  part before the colon.

[051 PM1]
  Set misc1 of stat specified by second operand to first operand.

[052 PM2]
  Set misc2 of stat specified by second operand to first operand.

[053 PM3]
  Set misc3 of stat specified by second operand to first operand.

[054 TELE]
  Teleport the stat XY list record specified by first operand to the
  coordinates specified by the second operand; the condition flag is true
  if successful, or false if it cannot (coordinates are out of range, or
  there is no such stat, or the target tile isn't UNDER). (The class of
  the target tile is ignored.)

[055 PSPD]
  Set speed of stat specified by second operand to the first operand.

[056 LOCK]
  The low 16-bits of the second operand are the stat number, and the high
  16-bits are the index into the XY list of that stat. Sets the layer/lock
  flag to the first operand; however, the low 2-bits are not used.

[057 PSD]
  The low 16-bits of the second operand are the stat number, and the high
  16-bits are the index into the XY list of that stat. The first operand
  is copied to the delay amount for that stat.

[058 RUN]
  The first operand specifies the stat XY record to use (like SEND, TELE,
  etc). It will run its script immediately instead of waiting for its
  turn; if the second operand is zero then it starts from the beginning
  of the code but if nonzero then it executes from the current position
  in the script. If the second operand is negative then it is treated as
  a command given as an argument to another command (such as #IF), so if
  it does not start with a punctuation then # is assumed.

[059 SKL]
  Skips the rest of the current line of text of the script denoted by the
  second operand (the stat XY record index, like LOCK, PSD, etc).

[05A GIP]
  The second operand specifies the stat XY record to use; the instruction
  pointer of that record is written into the first operand.

[05B PIP]
  The second operand specifies the stat XY record to use; the first operand
  value is copied into the instruction pointer of that record.

[05C FNT]
  The first opcode is coordinates. Looks beyond those coordinates in the
  direction specified by low 2-bits of the second operand, for a tile
  whose main layer has the TRANSPORTER attribute, and if it is found then
  the condition flag is true and the coordinates of the tile it found are
  written to the first operand, or to X and Y instead if the first operand
  is zero. If nothing is found, sets the condition flag false and the first
  operand is unchanged.

[05D COUN]
  Count the number of tiles matching a pattern, and store in the first
  operand. The second operand is the address of a structure which is like
  that of CHA, but only five fields instead of nine, and only the low three
  bits of the flags is used (the other bits are ignored).

[05E CHA]
  Changes all of one tile into another. The second operand is the address
  of a structure with the parameters, and the first operand is used for a
  value which may substitute one or more of the fields. The structure is:
  First = Flags (see below).
  Second = Kind to match. High 8-bits are a mask; set bits mean don't care.
  Third = Colour to match. (Mask is like above)
  Fourth = Parameter to match. (Mask is like above)
  Fifth = Stat number to match. (Mask is like above)
  Sixth = Kind to replace with. Any bits of high byte set means XOR value.
  Seventh = Colour to replace with. (XOR mask like above)
  Eighth = Parameter to replace with. (XOR mask like above)
  Ninth = Stat number to replace with; automatically adjusts stat XY lists.
  bit0 = Affect under layer.
  bit1 = Affect main layer.
  bit2 = Affect over layer.
  bit5-bit3 = Mode of use of first operand to add to one of the parameters.
  bit6 = If set, clears the user bit of changed stats.
  bit7 = If set, clears the lock bit of changed stats.
  bit14-bit8 = New delay value.
  bit15 = Set to change delay values of changed stats.
  Mode 0 = Ignored.
  Mode 1 = Colour to match.
  Mode 2 = Parameter to match.
  Mode 3 = Stat number to match.
  Mode 4 = Ignored.
  Mode 5 = Colour to replace with.
  Mode 6 = Parameter to replace with.
  Mode 7 = Stat number to replace with.

[05F CHAX]
  Like CHA but treats second to fifth and sixth to ninth both as matching
  and replacing with each other.

[060 MTIL]
  Second operand is coordinates. If they are valid, then the tile at the
  main layer at that coordinates is written to the first operand, with
  the kind in the low byte, and then colour, and then parameter, and then
  finally the stat number in the high byte. In this case, the condition
  flag will be true. If the coordinates are not valid, then the condition
  flag is false and the first operand is left unchanged.

[061 UTIL]
  Same as MTIL but for the under layer instead of the main layer.

[062 CLAM]
  Second operand is coordinates. If they are valid, then the class number
  of the element of the tile in the main layer at that coordinates is
  written to the first operand, and the condition flag is true; if the
  coordinates are not valid, then the first operand is unchanged and the
  condition flag is false.

[063 CLAU]
  Second operand is coordinates. If they are valid, then the class number
  of the element of the tile in the under layer at that coordinates is
  written to the first operand, and the condition flag is true; if the
  coordinates are not valid, then the first operand is unchanged and the
  condition flag is false.

[064 GTUK]
  Second operand is coordinates. If they are valid, then the kind of the
  tile in the under layer at the specified coordinates is written to the
  first operand, and the condition flag is true; if it is not valid, then
  the first operand is unchanged and the condition flag is false.

[065 GTUC]
  Like GTUK but the colour instead of the kind.

[066 GTUP]
  Like GTUK but the parameter instead of the kind.

[067 GTUS]
  Like GTUK but the stat number instead of the kind.

[068 GTMK]
  Like GTUK but the main layer instead of the under layer.

[069 GTMC]
  Like GTUC but the main layer instead of the under layer.

[06A GTMP]
  Like GTUP but the main layer instead of the under layer.

[06B GTMS]
  Like GTUS but the main layer instead of the under layer.

[06C GTOK]
  Like GTUK but the over layer instead of the under layer.

[06D GTOC]
  Like GTUC but the over layer instead of the under layer.

[06E GTOP]
  Like GTUP but the over layer instead of the under layer.

[06F GTOS]
  Like GTUS but the over layer instead of the under layer.

[070 PTM]
  Write a tile with the same format as MTIL to the main layer at the
  coordinates specified by the second operand; the condition flag will
  be true if the coordinates are valid or false otherwise. This instruction
  will also update the stat XY lists for the specified coordinates if the
  stat number of the tile has been changed.

[071 PTU]
  Like PTM but for the under layer instead of the main layer.

[072 FLOA]
  Second operand is coordinates; if valid then the condition flag is true
  but otherwise it is false. Moves the under layer at the specified
  coordinates to the main layer and sets the under layer to zero; this
  will update the stat XY record if applicable.

[073 SINK]
  This is like FLOA but moves the main layer to the under layer and sets
  the main layer to zero, instead of the other way around.

[074 PTUK]
  Second operand is coordinates. If they are valid, then the kind of the
  tile in the under layer at the specified coordinates is set to the low
  8-bits of the first operand, and the condition flag is true; if it is
  not valid, then the condition flag is false, and the board is unchanged.

[075 PTUC]
  Like PTUK but the colour instead of the kind.

[076 PTUP]
  Like PTUK but the parameter instead of the kind.

[077 PTUS]
  Like PTUK but the stat number instead of the kind. (Note that changing
  the stat number in this way will not update the stat data, unless you
  then use UNEW to add the stat.)

[078 PTMK]
  Like PTUK but the main layer instead of the under layer.

[079 PTMC]
  Like PTUC but the main layer instead of the under layer.

[07A PTMP]
  Like PTUP but the main layer instead of the under layer.

[07B PTMS]
  Like PTUS but the main layer instead of the under layer.

[07C PTOK]
  Like PTUK but the over layer instead of the under layer.

[07D PTOC]
  Like PTUC but the over layer instead of the under layer.

[07E PTOP]
  Like PTUP but the over layer instead of the under layer.

[07F PTOS]
  Like PTUS but the over layer instead of the under layer.

[080 PARN]
  Reads a number or numeric expression (optionally preceded by spaces) from
  a script selected from the second operand. If successful, skips past it,
  and the condition flag is true, and the first operand will be the number.
  If unsuccessful, condition flag is false.

[081 PARG]
  Reads a letter (optionally preceded by spaces) from a script selected
  from the second operand. If successful, skips past it, and the condition
  flag is true, and the first operand will be a number 0 to 15 based on
  the letter A to H or S to Z. If unsuccessful, condition flag is false.

[082 PARD]
  Reads a direction (optionally preceded by spaces) from a script selected
  from the second operand. If successful, skips past it, and the condition
  flag is true, and the first operand will be a number 0 to 3 which denotes
  the direction, otherwise it will be false. Direction IDLE will be -1.

[083 PARK]
  (Currently unused.)

[084 PARC]
  Reads a condition (optionally preceded by spaces) from a script selected
  from the second operand. If successful, skips past it, and the condition
  flag is set or clear according to the result of the condition. If not
  successful, does not skip, and the condition flag is unchanged.

[090 PICK]
  The second operand is the stat XY index in the same format as the SIXY
  instruction. The under layer at its coordinates are copied into the main
  layer, clearing the under layer; if what was previously in the under
  layer has a stat then its record is updated. The XY record for what was
  in the main layer is not changed. The first operand will store the tile
  (in the same format as MTIL) that was previously in the main layer. The
  X and Y registers are updated with the coordinates of the stat. The
  condition flag will be true if it was successful, or false if anything
  is wrong (e.g. coordinates out of range, index out of range, the tile
  at those coordinates is not that stat, etc).

[091 DROP]
  The operands are as in PICK. It will place the tile from the first
  operand at the coordinates specified by the X and Y registers, moving
  what was there to the under layer (updating its stat XY record if it
  is a stat), and updating the coordinates in the XY record of the stat
  for the tile that was placed, to the coordinates it was placed at. The
  condition flag will be true if successful, or false if there is any
  reason it doesn't work (coordinates out of range, index out of range,
  there is already another stat in the under layer, etc).

[100 LET]
  Copy second operand to first.

[101 INC]
  Copy second operand plus one to first.

[102 DEC]
  Copy second operand minus one to first.

[103 NEG]
  Copy zero minus second operand to first.

[104 NOT]
  Copy bitwise complement of second operand to first.

[106 FLET]
  Copy second operand to first if condition flag is false.

[107 TLET]
  Copy second operand to first if condition flag is true.

[108 FINC]
  Acts like INC if the condition flag is false, or no effect if true.

[109 TINC]
  Acts like INC if the condition flag is true, or no effect if false.

[10A FDEC]
  Acts like DEC if the condition flag is false, or no effect if true.

[10B TDEC]
  Acts like DEC if the condition flag is true, or no effect if false.

[10C SGN]
  The first operand will be -1 if the second operand is negative, or 0 if
  the second operand is zero, or 1 if the second operand is positive.

[10D ABS]
  Copy absolute value of second operand to first operand.

[10E ZEX]
  Copy low 16-bits of second operand to first operand; the high 16-bits of
  the first operand will then be clear.

[10F SEX]
  Copy low 16-bits of second operand to first operand; the high 16-bits of
  the first operand will then be all the same as bit15.

[110 CALL]
  Call a subroutine, with address given by second operand. The current
  values of W, X, Y, Z registers are the inputs of the subroutine, and then
  the return value is written to the first operand of this instruction.

[111 GO]
  Unconditionally jump to second operand, storing the address that the
  next instruction (as if it didn't jump) would be in the first operand.
  (If the first operand is S, then the second operand is ignored.) This
  instruction does not have a special treatment of addresses < 256.

[120 GIVE]
  The first operand tells which status variable to access, where A-H are
  the first eight and S-Z are the last eight. Adds the second operand to
  that value and stores in the status variable.

[121 TAKE]
  The first operand tells which status variable to access, where A-H are
  the first eight and S-Z are the last eight. If the second operand is
  greater than or equal to that value, then the status variable is updated
  with the difference and the condition flag is now true; otherwise, the
  condition flag is now false.

[122 ROB]
  The first operand tells which status variable to access, where A-H are
  the first eight and S-Z are the last eight. Subtracts the second operand
  to that value. If the total is positive, then it is stored in the status
  variable and the condition flag is true. If zero or negative, then it
  will set the status variable to zero and the condition flag is false.

[123 VSET]
  Set the value of the specified status variable (by the first operand)
  to the value of the second operand.

[124 BGIV]
  Similar to GIVE, but the second operand is the bit position (0 to 31) of
  the bit to set. The condition flag is true if that bit was previously
  clear, or false if it was already set (and therefore unchanged).

[125 BTAK]
  Similar to GIVE, but the second operand is the bit position (0 to 31) of
  the bit to clear. The condition flag is true if that bit was previously
  set, or false if it was already clear (and therefore unchanged).

[12C EAP0]
  The second operand is the element number; write the major appearance code
  of that element definition to the first operand.

[12D EAP1]
  The second operand is the element number; write the minor appearance code
  of that element definition to the first operand.

[12E EATT]
  The second operand is the element number; write the attribute of that
  element definition to the first operand.

[12F EJMP]
  Jump to the event of the element number specified by the second operand;
  the first operand selects the event (A for event 0, Z for event 15).

[130 PACK]
  If the X and Y coordinates are in range, then pack them into the first
  operand, and the condition flag is true. If not in range, then the
  condition flag is false, and if the second operand is nonzero then it
  is copied to the first operand.

[131 BIT]
  Set first operand to a value with a single bit set; the bit to be set
  will be specified by the low 5-bits of the second operand.

[140 SWPA]
  Copy A register to first operand and then second operand to A register.

[141 SWPB]
  Copy B register to first operand and then second operand to B register.

[142 SWPC]
  Copy C register to first operand and then second operand to C register.

[143 SWPD]
  Copy D register to first operand and then second operand to D register.

[144 SWPE]
  Copy E register to first operand and then second operand to E register.

[145 SWPF]
  Copy F register to first operand and then second operand to F register.

[146 SWPG]
  Copy G register to first operand and then second operand to G register.

[147 SWPH]
  Copy H register to first operand and then second operand to H register.

[14C SWPW]
  Copy W register to first operand and then second operand to W register.

[14D SWPX]
  Copy X register to first operand and then second operand to X register.

[14E SWPY]
  Copy Y register to first operand and then second operand to Y register.

[14F SWPZ]
  Copy Z register to first operand and then second operand to Z register.

[150 SIXY]
  The low 16-bits of the second operand are the stat number, and the high
  16-bits are the index into the XY list of that stat. The first operand
  will then be the packed coordinates of that record, and the condition
  flag will be true. If there is no such record, then the condition flag
  is false and the result is zero.

[151 GM1]
  Read misc1 of stat specified by second operand into first operand.

[152 GM2]
  Read misc2 of stat specified by second operand into first operand.

[153 GM3]
  Read misc3 of stat specified by second operand into first operand.

[154 GCOU]
  Read number of XY entries of stat specified by second operand into the
  first operand.

[155 GSPD]
  Read speed of stat specified by second operand into the first operand.

[156 LAY]
  The low 16-bits of the second operand are the stat number, and the high
  16-bits are the index into the XY list of that stat. The first operand
  will then be the layer/lock flag of that stat. The condition flag will
  be false if it is locked or no such record, or true if unlocked.

[157 GSD]
  The low 16-bits of the second operand are the stat number, and the high
  16-bits are the index into the XY list of that stat. The first operand
  is then a copy of the delay amount for that stat.

[158 SIN]
  The second operand is in the same format as the result of SIXY, SIU, SIM,
  etc. The first operand will be the next XY record for the same stat, and
  the condition flag is true. If there are no more records for that stat,
  then the condition flag is false, and the first operand will be the first
  record, or zero if the stat number is not valid, or if there are no XY
  records for that stat number.

[159 SIU]
  Second operand is packed coordinates, and the first operand is the index
  (in the same format as SIXY) of the record for the stat at that location
  in the under layer, or zero if there isn't any. Condition flag is true
  if the result is nonzero or false if zero.

[15A SIM]
  Same as SIU but the main layer instead of the under layer.

[15B SIO]
  Same as SIU but the over layer instead of the under layer.

[15D UNEW]
  Create a new XY record for the stat at the coordinates specified by the
  second operand, according to the stat number of the tile in the under
  layer at that coordinates, and create it in the under layer. The first
  operand will be the stat number and XY record number.

[15E MNEW]
  Same as UNEW but the main layer instead of the under layer.

[15F ONEW]
  Same as UNEW but the over layer instead of the under layer.

